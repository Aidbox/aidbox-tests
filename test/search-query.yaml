id: search-query
desc: |
  With SearchQuery resource you can define "managed"  SQL for Search API with parameters, paging, sorting and includes.

  See https://docs.aidbox.app/basic-concepts/search-1/searchquery

steps:
- id: clean
  desc: |
    Clear all patients.
  POST: /$sql
  body: |
    truncate patient;
    truncate encounter;
    truncate organization;
  match:
    status: 200

- id: prerequisites
  desc: |
    Upload patients, encounters & organizations.
  PUT: /
  body:

  - id: org-1
    resourceType: Organization
    name: iBolit & Co.
    type:
    - text: Healtcare provider
  - id: org-2
    resourceType: Organization
    name: Arkham Asylum
    type:
    - text: Healtcare provider

  - id: pt-1
    resourceType: Patient
    name: [{given: [Vlad], family: Ganshin}]
    birthDate: '1994-09-26'
    address: [{city: St. Petersburg}]
    gender: male
    text:
      status: additional
      div: Healthy Patient
    managingOrganization:
      id: org-1
      resourceType: Organization

  - id: pt-2
    resourceType: Patient
    name: [{given: [Anna], family: Chu}]
    birthDate: '1994-08-07'
    address: [{city: Kolpino}]
    gender: female
    text:
      status: additional
      div: Unknown
    managingOrganization:
      id: org-1
      resourceType: Organization
  - id: enc-1
    resourceType: Encounter
    status: planned
    subject:
      id: pt-2
      resourceType: Patient

  - id: pt-3
    resourceType: Patient
    name: [{given: [Ivan], family: Shilov}]
    address: [{city: Pushkin}]
    gender: male
    birthDate: '1994-05-01'
    text:
      status: additional
      div: In progress
    managingOrganization:
      id: org-2
      resourceType: Organization

  - id: pt-4
    resourceType: Patient
    name: [{given: [Victor], family: Sidorov}]
    address: [{city: Pavlovsk}]
    gender: male
    birthDate: '1990-02-01'
    text:
      status: additional
      div: Old
  - id: enc-2
    resourceType: Encounter
    status: finished
    subject:
      id: pt-4
      resourceType: Patient
  - id: enc-3
    resourceType: Encounter
    status: arrived
    subject:
      id: pt-4
      resourceType: Patient
  match:
    status: 200

- id: create-search-query
  desc: |
    Create SearchQuery resource to look for young Patients
    and with such params as gender and family.
  PUT: /SearchQuery/q-1
  body:
    # attach this query to Patient resource type
    resource: {id: 'Patient', resourceType: 'Entity'}
    # give alias to patient table
    as: pt
    # enable total query
    total: true 
    # basic query
    query:
      where: "(pt.resource->>'birthDate')::date > '1994-01-01'"
      order-by: pt.id desc
    params:
      gender:
        type: string
        where: "pt.resource->>'gender' = {{params.gender}}"
      family:
        type: string
        format: '%?%'
        where: |
          aidbox_text_search(knife_extract_text(pt.resource, $$[["name","family"]]$$)) ilike {{params.family}}
  match:
    status: ok?

- id: search-without-additional-params
  desc: |
    Search all young patients.
  GET: /alpha/Patient?query=q-1
  match:
    status: 200
    body:
      resourceType: Bundle
      type: searchset
      entry:
      - resource:
          id: pt-3
          resourceType: Patient
      - resource:
          id: pt-2
          resourceType: Patient
      - resource:
          id: pt-1
          resourceType: Patient
      total: 3

- id: search-with-gender-param
  desc: |
    Search all male young patients.
  GET: "/alpha/Patient?query=q-1&gender=male"
  match:
    status: 200
    body:
      resourceType: Bundle
      type: searchset
      entry:
      - resource:
          id: pt-3
          resourceType: Patient
      - resource:
          id: pt-1
          resourceType: Patient
      total: 2

- id: search-with-gender-and-family-params
  desc: |
    Search all male patients with corresponding last name (family).
  GET: "/alpha/Patient?query=q-1&gender=male&family=Ganshin"
  match:
    status: 200
    body:
      resourceType: Bundle
      type: searchset
      entry:
      - resource:
          id: pt-1
          resourceType: Patient
      total: 1

- id: create-search-for-encounter
  desc: |
    Create SearchQuery for encounter by patient's lastname 
  PUT: /SearchQuery/q-2
  body:
    resource: {id: 'Encounter', resourceType: 'Entity'}
    as: enc
    query:
      order-by: pt.id desc
    params:
      pt:
        type: string
        format: '% ?%'
        join:
          pt: 
            table: patient
            by: "enc.resource#>>'{subject,id}' = pt.id"
        where: |
          aidbox_text_search(knife_extract_text(pt.resource, $$[["name","family"]]$$)) 
          ilike {{params.pt}}

- id: search-encouters
  desc: |
    Search Sidorov's encounters.
  GET: /alpha/Encounter?query=q-2&pt=Sidorov
  match:
    status: 200
    body:
      entry:
      - resource:
          id: enc-2
      - resource:
          id: enc-3

- id: create-sq-with-includes
  desc: |
    Create SearchQuery for planned encounters with included Patient (subject) & Organization (organization).
  PUT: /SearchQuery/q-3
  body:
    resourceType: SearchQuery
    resource: {id: Encounter, resourceType: Entity}
    as: enc
    query:
      where: "enc.resource->>'status' = 'planned'"
      order-by: enc.id
    total: true
    includes:
      # name for include
      subject:
        # path to reference
        path: [subject]
        # ref to resource
        resource: {id: Patient, resourceType: Entity}
        # nested includes
        includes:
          organization:
            path: [managingOrganization]
            resource: {id: Organization, resourceType: Entity}
    limit: 40
  match:
    status: 201

- id: use-sq
  desc: |
    Search planned encounters.
  GET: /alpha/Encounter?query=q-3
  match:
    status: 200
    body:
      entry:
      - resource:
          id: enc-1
          subject:
            id: pt-2
            resourceType: Patient
      - resource:
          id: pt-2
          resourceType: Patient
      - resource:
          id: org-1
          resourceType: Organization

- id: explain-analyze
  desc: |
    Used to analyze combined sql.
  GET: "/alpha/Encounter?query=q-2&pt=Sid&_explain=analyze"
  match:
    status: 200
    body:
      query: "#^EXPLAIN ANALYZE"
      explain: "#Planing Time: |Execution Time: "
      params: ["% Sid%"]
